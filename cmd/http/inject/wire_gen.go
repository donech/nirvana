// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package inject

import (
	"github.com/donech/nirvana/internal/config"
	"github.com/donech/nirvana/internal/conn"
	repository2 "github.com/donech/nirvana/internal/domain/lottery/repository"
	"github.com/donech/nirvana/internal/domain/lottery/service"
	"github.com/donech/nirvana/internal/domain/user/repository"
	gin2 "github.com/donech/nirvana/internal/entry/gin"
	"github.com/donech/nirvana/internal/entry/gin/api/v1"
	"github.com/donech/tool/entry/gin"
	"github.com/donech/tool/xlog"
	"github.com/spf13/viper"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func InitApplication() (*gin.Entry, func(), error) {
	viperViper := viper.GetViper()
	configConfig := config.New(viperViper)
	nirvanaDB, cleanup := conn.NewNirvanaDB(configConfig)
	userRepository := repository.NewUserRepository(nirvanaDB)
	userController := v1.NewUserController(userRepository)
	ticketRepository := repository2.NewTicketRepository(nirvanaDB)
	recordRepository := repository2.NewRecordRepository(nirvanaDB)
	lotteryService := service.NewLotteryService(ticketRepository, recordRepository)
	lotteryController := v1.NewLotteryController(lotteryService)
	defaultController := v1.NewDefaultController()
	loginFunc := gin2.NewLoginFunc()
	jwtFactory := gin2.NewJWTFactory(configConfig, loginFunc)
	jwtMiddleware := gin2.NewJWTMiddleware(jwtFactory)
	jwtController := v1.NewJwtController(jwtMiddleware)
	router := gin2.NewRouter(userController, lotteryController, defaultController, jwtController)
	logger, err := providerLogger(configConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	entry := gin2.NewEntry(configConfig, router, logger)
	return entry, func() {
		cleanup()
	}, nil
}

// wire.go:

func providerLogger(conf *config.Config) (logger *zap.Logger, err error) {
	return xlog.New(conf.Log)
}
